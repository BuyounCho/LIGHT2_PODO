/* Generated by FORCESPRO v4.2.0 on Monday, February 22, 2021 at 1:54:43 PM */
#ifndef Solver_PumpPressureControl_H
#define Solver_PumpPressureControl_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#include <stddef.h>
#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double Solver_PumpPressureControl_float;
typedef double Solver_PumpPressureControl_callback_float;
typedef double Solver_PumpPressureControlinterface_float;
typedef int Solver_PumpPressureControl_int;

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_Solver_PumpPressureControl
#define MISRA_C_Solver_PumpPressureControl (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_Solver_PumpPressureControl
#define RESTRICT_CODE_Solver_PumpPressureControl (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_Solver_PumpPressureControl
#define SET_PRINTLEVEL_Solver_PumpPressureControl    (0)
#endif

/* timing */
#ifndef SET_TIMING_Solver_PumpPressureControl
#define SET_TIMING_Solver_PumpPressureControl    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_Solver_PumpPressureControl			(200)	 

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_Solver_PumpPressureControl		(Solver_PumpPressureControl_float)(1E-06)


/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_Solver_PumpPressureControl      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_Solver_PumpPressureControl (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_Solver_PumpPressureControl   (2)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_Solver_PumpPressureControl  (-6)

/* no progress in method possible */
#define NOPROGRESS_Solver_PumpPressureControl   (-7)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_Solver_PumpPressureControl   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_Solver_PumpPressureControl   (-12)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_Solver_PumpPressureControl  (-100)

/* qp solver error */
#define QP_SOLVER_FAILURE_Solver_PumpPressureControl (-8)


/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
	    /* vector of size 2 */
    Solver_PumpPressureControl_float xinit[2];

    /* vector of size 48 */
    Solver_PumpPressureControl_float x0[48];

    /* vector of size 16 */
    Solver_PumpPressureControl_float all_parameters[16];

    /* scalar */
    Solver_PumpPressureControl_int reinitialize;


} Solver_PumpPressureControl_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
	    /* vector of size 3 */
    Solver_PumpPressureControl_float x01[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x02[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x03[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x04[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x05[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x06[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x07[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x08[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x09[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x10[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x11[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x12[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x13[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x14[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x15[3];

    /* vector of size 3 */
    Solver_PumpPressureControl_float x16[3];


} Solver_PumpPressureControl_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
	/* iteration number */
	solver_int32_default it;

	/* inf-norm of equality constraint residuals */
	Solver_PumpPressureControl_float res_eq;

	/* norm of stationarity condition */
	Solver_PumpPressureControl_float rsnorm;

	/* primal objective */
	Solver_PumpPressureControl_float pobj;

	/* total solve time */
	Solver_PumpPressureControl_float solvetime;

	/* time spent in function evaluations */
	Solver_PumpPressureControl_float fevalstime;

	/* time spent solving QPs */
	Solver_PumpPressureControl_float QPtime;
} Solver_PumpPressureControl_info;



/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Monday, February 22, 2021 1:54:43 PM */
/* User License expires on: (UTC) Sunday, August 15, 2021 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Sunday, August 15, 2021 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 4d406d89-2e1b-411a-bfc6-c1c42da9da06 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void(*Solver_PumpPressureControl_extfunc)(Solver_PumpPressureControl_float* x, Solver_PumpPressureControl_float* y, Solver_PumpPressureControl_float* lambda, Solver_PumpPressureControl_float* params, Solver_PumpPressureControl_float* pobj, Solver_PumpPressureControl_float* g, Solver_PumpPressureControl_float* c, Solver_PumpPressureControl_float* Jeq, Solver_PumpPressureControl_float* h, Solver_PumpPressureControl_float* Jineq, Solver_PumpPressureControl_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default Solver_PumpPressureControl_solve(Solver_PumpPressureControl_params *params, Solver_PumpPressureControl_output *output, Solver_PumpPressureControl_info *info, FILE *fs, Solver_PumpPressureControl_extfunc evalextfunctions_Solver_PumpPressureControl);



//Integrator declarations
typedef const solver_int32_default* (*cDynJacXsparsity)( solver_int32_default i );
typedef const solver_int32_default* (*cDynJacUsparsity)( solver_int32_default i );
typedef solver_int32_default (*fConDynamics)( const Solver_PumpPressureControl_callback_float** arg, Solver_PumpPressureControl_callback_float** res, solver_int32_default* iw, Solver_PumpPressureControl_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacStateDynamics)( const Solver_PumpPressureControl_callback_float** arg, Solver_PumpPressureControl_callback_float** res, solver_int32_default* iw, Solver_PumpPressureControl_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacInputDynamics)( const Solver_PumpPressureControl_callback_float** arg, Solver_PumpPressureControl_callback_float** res, solver_int32_default* iw, Solver_PumpPressureControl_callback_float* w, solver_int32_default mem );

void Solver_PumpPressureControl_rkfour_0(const Solver_PumpPressureControl_callback_float * const z, const Solver_PumpPressureControl_callback_float * const p, Solver_PumpPressureControl_float * const c, Solver_PumpPressureControl_float * const jacc,
            fConDynamics cDyn0rd, fConDynamics cDyn, const solver_int32_default threadID);




#ifdef __cplusplus
}
#endif

#endif
